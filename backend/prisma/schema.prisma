// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String?
  role              String    @default("user") // "admin" or "user"
  clerkId           String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastAnalyzedAt    DateTime? // When this user's meetings were last analyzed
  
  // Google integration
  googleConnected   Boolean   @default(false)
  googleRefreshToken String?
  
  // Admin-team member relationship
  adminId           String?   // Which admin invited this user (null for admins)
  admin             User?     @relation("TeamMembers", fields: [adminId], references: [id], onDelete: SetNull)
  teamMembers       User[]    @relation("TeamMembers") // Team members this admin has invited
  
  // Invitations relationship
  sentInvitations   TeamInvitation[] @relation("SentInvitations")
  
  // Meetings relationship
  meetings          Meeting[]  @relation("UserMeetings")
  
  // Key Areas relationship
  keyAreas          KeyArea[]  @relation("UserKeyAreas")
  createdKeyAreas   KeyArea[]  @relation("CreatedKeyAreas")
  
  // AI settings for custom processing
  useCustomAI       Boolean   @default(false)
  aiProvider        String    @default("anthropic") // "anthropic" or "openai"
  anthropicApiKey   String?   // Encrypted
  openaiApiKey      String?   // Encrypted
  hasAnthropicKey   Boolean   @default(false)
  hasOpenAIKey      Boolean   @default(false)
  
  // Analysis relationship
  analysis          UserAnalysis?
  
  // Analysis history relationship
  analysisHistory   AnalysisHistory[] @relation("UserAnalysisHistory")
}

model UserAnalysis {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wins            String[]
  areasForSupport String[]
  actionItems     String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model AnalysisHistory {
  id              String    @id @default(uuid())
  userId          String    
  user            User      @relation("UserAnalysisHistory", fields: [userId], references: [id], onDelete: Cascade)
  wins            String[]
  areasForSupport String[]
  actionItems     String[]
  analyzedAt      DateTime  @default(now())
  
  @@index([userId, analyzedAt(sort: Desc)])
}

model TeamInvitation {
  id          String    @id @default(uuid())
  email       String    
  token       String    @unique
  expires     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("pending") // "pending", "accepted", "rejected", "expired"
  
  // Admin who sent the invitation
  inviterId   String
  inviter     User      @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  
  @@unique([email, inviterId])
}

model Meeting {
  id                String    @id @default(uuid())
  title             String
  teamMemberId      String    // This can be the User's id (team member)
  date              DateTime
  duration          Int       // Duration in minutes
  status            String    @default("scheduled") // "scheduled", "completed", "cancelled"
  meetingType       String    @default("default")   // "default", "one_on_one", "team_meeting", "client_presentation", "sales_call"
  
  // MeetingBaas specific fields
  googleMeetLink    String?
  meetingBaasId     String?   @unique
  processingStatus  String    @default("pending") // "pending", "processing", "completed", "failed"
  recordingUrl      String?   // URL to the recorded meeting video
  
  // NLP Results
  transcript        String?   @db.Text
  executiveSummary  String?   @db.Text
  wins              String[]  
  areasForSupport   String[]
  actionItems       String[]  // Legacy format - will be migrated to ActionItem relation
  keyInsights       String[]  @default([])
  clientFeedback    String[]  @default([])
  
  // Relations for structured action items
  actionItemsData   ActionItem[] @relation("MeetingActionItems")
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  createdBy         String    // User id who created this meeting
  user              User      @relation("UserMeetings", fields: [createdBy], references: [id], onDelete: Cascade)
}

// New model for structured action items
model ActionItem {
  id          String    @id @default(uuid())
  text        String
  status      String    @default("incomplete") // "incomplete" or "complete"
  assignedTo  String?   // User id of assignee (can be null if unassigned)
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relation to meeting
  meetingId   String
  meeting     Meeting   @relation("MeetingActionItems", fields: [meetingId], references: [id], onDelete: Cascade)
  
  @@index([meetingId])
  @@index([assignedTo])
}

model KeyArea {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // User this key area belongs to
  userId      String
  user        User      @relation("UserKeyAreas", fields: [userId], references: [id], onDelete: Cascade)
  
  // Admin who created this key area
  createdById String
  createdBy   User      @relation("CreatedKeyAreas", fields: [createdById], references: [id], onDelete: Cascade)
}
